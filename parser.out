Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> function
Rule 2     code -> code code
Rule 3     function -> DEF NAME LPAREN RPAREN statement
Rule 4     function -> DEF NAME LPAREN RPAREN statementc
Rule 5     function -> DEF NAME LPAREN NAME RPAREN statement
Rule 6     function -> DEF NAME LPAREN NAME RPAREN statementc
Rule 7     function -> DEF NAME LPAREN args RPAREN statement
Rule 8     function -> DEF NAME LPAREN args RPAREN statementc
Rule 9     args -> args COMMA NAME
Rule 10    args -> NAME COMMA NAME
Rule 11    argse -> argse COMMA expression
Rule 12    argse -> expression COMMA expression
Rule 13    statement -> NAME LPAREN RPAREN SEMICOLON
Rule 14    statement -> NAME LPAREN argse RPAREN SEMICOLON
Rule 15    statement -> NAME LPAREN expression RPAREN SEMICOLON
Rule 16    statements -> statement statements
Rule 17    statements -> statement statement
Rule 18    statementc -> LBRAC statement RBRAC
Rule 19    statementc -> LBRAC statements RBRAC
Rule 20    statementc -> LBRAC empty RBRAC
Rule 21    statement -> NAME EQUALS expression SEMICOLON
Rule 22    statement -> RETURN expression SEMICOLON
Rule 23    expression -> INT
Rule 24    expression -> NAME
Rule 25    expression -> STRING
Rule 26    expression -> expression MUL expression
Rule 27    expression -> expression DIV expression
Rule 28    expression -> expression PLUS expression
Rule 29    expression -> expression MINUS expression
Rule 30    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 9 10 11 12
DEF                  : 3 4 5 6 7 8
DIV                  : 27
EQUALS               : 21
INT                  : 23
LBRAC                : 18 19 20
LPAREN               : 3 4 5 6 7 8 13 14 15
MINUS                : 29
MUL                  : 26
NAME                 : 3 4 5 5 6 6 7 8 9 10 10 13 14 15 21 24
PLUS                 : 28
RBRAC                : 18 19 20
RETURN               : 22
RPAREN               : 3 4 5 6 7 8 13 14 15
SEMICOLON            : 13 14 15 21 22
STRING               : 25
error                : 

Nonterminals, with rules where they appear

args                 : 7 8 9
argse                : 11 14
code                 : 2 2 0
empty                : 20
expression           : 11 12 12 15 21 22 26 26 27 27 28 28 29 29
function             : 1
statement            : 3 5 7 16 17 17 18
statementc           : 4 6 8
statements           : 16 19

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . function
    (2) code -> . code code
    (3) function -> . DEF NAME LPAREN RPAREN statement
    (4) function -> . DEF NAME LPAREN RPAREN statementc
    (5) function -> . DEF NAME LPAREN NAME RPAREN statement
    (6) function -> . DEF NAME LPAREN NAME RPAREN statementc
    (7) function -> . DEF NAME LPAREN args RPAREN statement
    (8) function -> . DEF NAME LPAREN args RPAREN statementc

    DEF             shift and go to state 3

    code                           shift and go to state 1
    function                       shift and go to state 2

state 1

    (0) S' -> code .
    (2) code -> code . code
    (1) code -> . function
    (2) code -> . code code
    (3) function -> . DEF NAME LPAREN RPAREN statement
    (4) function -> . DEF NAME LPAREN RPAREN statementc
    (5) function -> . DEF NAME LPAREN NAME RPAREN statement
    (6) function -> . DEF NAME LPAREN NAME RPAREN statementc
    (7) function -> . DEF NAME LPAREN args RPAREN statement
    (8) function -> . DEF NAME LPAREN args RPAREN statementc

    DEF             shift and go to state 3

    code                           shift and go to state 4
    function                       shift and go to state 2

state 2

    (1) code -> function .

    DEF             reduce using rule 1 (code -> function .)
    $end            reduce using rule 1 (code -> function .)


state 3

    (3) function -> DEF . NAME LPAREN RPAREN statement
    (4) function -> DEF . NAME LPAREN RPAREN statementc
    (5) function -> DEF . NAME LPAREN NAME RPAREN statement
    (6) function -> DEF . NAME LPAREN NAME RPAREN statementc
    (7) function -> DEF . NAME LPAREN args RPAREN statement
    (8) function -> DEF . NAME LPAREN args RPAREN statementc

    NAME            shift and go to state 5


state 4

    (2) code -> code code .
    (2) code -> code . code
    (1) code -> . function
    (2) code -> . code code
    (3) function -> . DEF NAME LPAREN RPAREN statement
    (4) function -> . DEF NAME LPAREN RPAREN statementc
    (5) function -> . DEF NAME LPAREN NAME RPAREN statement
    (6) function -> . DEF NAME LPAREN NAME RPAREN statementc
    (7) function -> . DEF NAME LPAREN args RPAREN statement
    (8) function -> . DEF NAME LPAREN args RPAREN statementc

  ! shift/reduce conflict for DEF resolved as shift
    $end            reduce using rule 2 (code -> code code .)
    DEF             shift and go to state 3

  ! DEF             [ reduce using rule 2 (code -> code code .) ]

    code                           shift and go to state 4
    function                       shift and go to state 2

state 5

    (3) function -> DEF NAME . LPAREN RPAREN statement
    (4) function -> DEF NAME . LPAREN RPAREN statementc
    (5) function -> DEF NAME . LPAREN NAME RPAREN statement
    (6) function -> DEF NAME . LPAREN NAME RPAREN statementc
    (7) function -> DEF NAME . LPAREN args RPAREN statement
    (8) function -> DEF NAME . LPAREN args RPAREN statementc

    LPAREN          shift and go to state 6


state 6

    (3) function -> DEF NAME LPAREN . RPAREN statement
    (4) function -> DEF NAME LPAREN . RPAREN statementc
    (5) function -> DEF NAME LPAREN . NAME RPAREN statement
    (6) function -> DEF NAME LPAREN . NAME RPAREN statementc
    (7) function -> DEF NAME LPAREN . args RPAREN statement
    (8) function -> DEF NAME LPAREN . args RPAREN statementc
    (9) args -> . args COMMA NAME
    (10) args -> . NAME COMMA NAME

    RPAREN          shift and go to state 8
    NAME            shift and go to state 7

    args                           shift and go to state 9

state 7

    (5) function -> DEF NAME LPAREN NAME . RPAREN statement
    (6) function -> DEF NAME LPAREN NAME . RPAREN statementc
    (10) args -> NAME . COMMA NAME

    RPAREN          shift and go to state 10
    COMMA           shift and go to state 11


state 8

    (3) function -> DEF NAME LPAREN RPAREN . statement
    (4) function -> DEF NAME LPAREN RPAREN . statementc
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON
    (18) statementc -> . LBRAC statement RBRAC
    (19) statementc -> . LBRAC statements RBRAC
    (20) statementc -> . LBRAC empty RBRAC

    NAME            shift and go to state 12
    RETURN          shift and go to state 15
    LBRAC           shift and go to state 16

    statement                      shift and go to state 13
    statementc                     shift and go to state 14

state 9

    (7) function -> DEF NAME LPAREN args . RPAREN statement
    (8) function -> DEF NAME LPAREN args . RPAREN statementc
    (9) args -> args . COMMA NAME

    RPAREN          shift and go to state 17
    COMMA           shift and go to state 18


state 10

    (5) function -> DEF NAME LPAREN NAME RPAREN . statement
    (6) function -> DEF NAME LPAREN NAME RPAREN . statementc
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON
    (18) statementc -> . LBRAC statement RBRAC
    (19) statementc -> . LBRAC statements RBRAC
    (20) statementc -> . LBRAC empty RBRAC

    NAME            shift and go to state 12
    RETURN          shift and go to state 15
    LBRAC           shift and go to state 16

    statement                      shift and go to state 19
    statementc                     shift and go to state 20

state 11

    (10) args -> NAME COMMA . NAME

    NAME            shift and go to state 21


state 12

    (13) statement -> NAME . LPAREN RPAREN SEMICOLON
    (14) statement -> NAME . LPAREN argse RPAREN SEMICOLON
    (15) statement -> NAME . LPAREN expression RPAREN SEMICOLON
    (21) statement -> NAME . EQUALS expression SEMICOLON

    LPAREN          shift and go to state 22
    EQUALS          shift and go to state 23


state 13

    (3) function -> DEF NAME LPAREN RPAREN statement .

    DEF             reduce using rule 3 (function -> DEF NAME LPAREN RPAREN statement .)
    $end            reduce using rule 3 (function -> DEF NAME LPAREN RPAREN statement .)


state 14

    (4) function -> DEF NAME LPAREN RPAREN statementc .

    DEF             reduce using rule 4 (function -> DEF NAME LPAREN RPAREN statementc .)
    $end            reduce using rule 4 (function -> DEF NAME LPAREN RPAREN statementc .)


state 15

    (22) statement -> RETURN . expression SEMICOLON
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 24

state 16

    (18) statementc -> LBRAC . statement RBRAC
    (19) statementc -> LBRAC . statements RBRAC
    (20) statementc -> LBRAC . empty RBRAC
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON
    (16) statements -> . statement statements
    (17) statements -> . statement statement
    (30) empty -> .

    NAME            shift and go to state 12
    RETURN          shift and go to state 15
    RBRAC           reduce using rule 30 (empty -> .)

    statement                      shift and go to state 28
    statements                     shift and go to state 29
    empty                          shift and go to state 30

state 17

    (7) function -> DEF NAME LPAREN args RPAREN . statement
    (8) function -> DEF NAME LPAREN args RPAREN . statementc
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON
    (18) statementc -> . LBRAC statement RBRAC
    (19) statementc -> . LBRAC statements RBRAC
    (20) statementc -> . LBRAC empty RBRAC

    NAME            shift and go to state 12
    RETURN          shift and go to state 15
    LBRAC           shift and go to state 16

    statement                      shift and go to state 31
    statementc                     shift and go to state 32

state 18

    (9) args -> args COMMA . NAME

    NAME            shift and go to state 33


state 19

    (5) function -> DEF NAME LPAREN NAME RPAREN statement .

    DEF             reduce using rule 5 (function -> DEF NAME LPAREN NAME RPAREN statement .)
    $end            reduce using rule 5 (function -> DEF NAME LPAREN NAME RPAREN statement .)


state 20

    (6) function -> DEF NAME LPAREN NAME RPAREN statementc .

    DEF             reduce using rule 6 (function -> DEF NAME LPAREN NAME RPAREN statementc .)
    $end            reduce using rule 6 (function -> DEF NAME LPAREN NAME RPAREN statementc .)


state 21

    (10) args -> NAME COMMA NAME .

    RPAREN          reduce using rule 10 (args -> NAME COMMA NAME .)
    COMMA           reduce using rule 10 (args -> NAME COMMA NAME .)


state 22

    (13) statement -> NAME LPAREN . RPAREN SEMICOLON
    (14) statement -> NAME LPAREN . argse RPAREN SEMICOLON
    (15) statement -> NAME LPAREN . expression RPAREN SEMICOLON
    (11) argse -> . argse COMMA expression
    (12) argse -> . expression COMMA expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    RPAREN          shift and go to state 34
    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    argse                          shift and go to state 35
    expression                     shift and go to state 36

state 23

    (21) statement -> NAME EQUALS . expression SEMICOLON
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 37

state 24

    (22) statement -> RETURN expression . SEMICOLON
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       shift and go to state 38
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 25

    (23) expression -> INT .

    SEMICOLON       reduce using rule 23 (expression -> INT .)
    MUL             reduce using rule 23 (expression -> INT .)
    DIV             reduce using rule 23 (expression -> INT .)
    PLUS            reduce using rule 23 (expression -> INT .)
    MINUS           reduce using rule 23 (expression -> INT .)
    RPAREN          reduce using rule 23 (expression -> INT .)
    COMMA           reduce using rule 23 (expression -> INT .)


state 26

    (24) expression -> NAME .

    SEMICOLON       reduce using rule 24 (expression -> NAME .)
    MUL             reduce using rule 24 (expression -> NAME .)
    DIV             reduce using rule 24 (expression -> NAME .)
    PLUS            reduce using rule 24 (expression -> NAME .)
    MINUS           reduce using rule 24 (expression -> NAME .)
    RPAREN          reduce using rule 24 (expression -> NAME .)
    COMMA           reduce using rule 24 (expression -> NAME .)


state 27

    (25) expression -> STRING .

    SEMICOLON       reduce using rule 25 (expression -> STRING .)
    MUL             reduce using rule 25 (expression -> STRING .)
    DIV             reduce using rule 25 (expression -> STRING .)
    PLUS            reduce using rule 25 (expression -> STRING .)
    MINUS           reduce using rule 25 (expression -> STRING .)
    RPAREN          reduce using rule 25 (expression -> STRING .)
    COMMA           reduce using rule 25 (expression -> STRING .)


state 28

    (18) statementc -> LBRAC statement . RBRAC
    (16) statements -> statement . statements
    (17) statements -> statement . statement
    (16) statements -> . statement statements
    (17) statements -> . statement statement
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON

    RBRAC           shift and go to state 44
    NAME            shift and go to state 12
    RETURN          shift and go to state 15

    statement                      shift and go to state 43
    statements                     shift and go to state 45

state 29

    (19) statementc -> LBRAC statements . RBRAC

    RBRAC           shift and go to state 46


state 30

    (20) statementc -> LBRAC empty . RBRAC

    RBRAC           shift and go to state 47


state 31

    (7) function -> DEF NAME LPAREN args RPAREN statement .

    DEF             reduce using rule 7 (function -> DEF NAME LPAREN args RPAREN statement .)
    $end            reduce using rule 7 (function -> DEF NAME LPAREN args RPAREN statement .)


state 32

    (8) function -> DEF NAME LPAREN args RPAREN statementc .

    DEF             reduce using rule 8 (function -> DEF NAME LPAREN args RPAREN statementc .)
    $end            reduce using rule 8 (function -> DEF NAME LPAREN args RPAREN statementc .)


state 33

    (9) args -> args COMMA NAME .

    RPAREN          reduce using rule 9 (args -> args COMMA NAME .)
    COMMA           reduce using rule 9 (args -> args COMMA NAME .)


state 34

    (13) statement -> NAME LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 48


state 35

    (14) statement -> NAME LPAREN argse . RPAREN SEMICOLON
    (11) argse -> argse . COMMA expression

    RPAREN          shift and go to state 49
    COMMA           shift and go to state 50


state 36

    (15) statement -> NAME LPAREN expression . RPAREN SEMICOLON
    (12) argse -> expression . COMMA expression
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    RPAREN          shift and go to state 51
    COMMA           shift and go to state 52
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 37

    (21) statement -> NAME EQUALS expression . SEMICOLON
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       shift and go to state 53
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 38

    (22) statement -> RETURN expression SEMICOLON .

    DEF             reduce using rule 22 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 22 (statement -> RETURN expression SEMICOLON .)
    RBRAC           reduce using rule 22 (statement -> RETURN expression SEMICOLON .)
    NAME            reduce using rule 22 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 22 (statement -> RETURN expression SEMICOLON .)


state 39

    (26) expression -> expression MUL . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 54

state 40

    (27) expression -> expression DIV . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 55

state 41

    (28) expression -> expression PLUS . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 56

state 42

    (29) expression -> expression MINUS . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 57

state 43

    (17) statements -> statement statement .
    (16) statements -> statement . statements
    (17) statements -> statement . statement
    (16) statements -> . statement statements
    (17) statements -> . statement statement
    (13) statement -> . NAME LPAREN RPAREN SEMICOLON
    (14) statement -> . NAME LPAREN argse RPAREN SEMICOLON
    (15) statement -> . NAME LPAREN expression RPAREN SEMICOLON
    (21) statement -> . NAME EQUALS expression SEMICOLON
    (22) statement -> . RETURN expression SEMICOLON

    RBRAC           reduce using rule 17 (statements -> statement statement .)
    NAME            shift and go to state 12
    RETURN          shift and go to state 15

    statement                      shift and go to state 43
    statements                     shift and go to state 45

state 44

    (18) statementc -> LBRAC statement RBRAC .

    DEF             reduce using rule 18 (statementc -> LBRAC statement RBRAC .)
    $end            reduce using rule 18 (statementc -> LBRAC statement RBRAC .)


state 45

    (16) statements -> statement statements .

    RBRAC           reduce using rule 16 (statements -> statement statements .)


state 46

    (19) statementc -> LBRAC statements RBRAC .

    DEF             reduce using rule 19 (statementc -> LBRAC statements RBRAC .)
    $end            reduce using rule 19 (statementc -> LBRAC statements RBRAC .)


state 47

    (20) statementc -> LBRAC empty RBRAC .

    DEF             reduce using rule 20 (statementc -> LBRAC empty RBRAC .)
    $end            reduce using rule 20 (statementc -> LBRAC empty RBRAC .)


state 48

    (13) statement -> NAME LPAREN RPAREN SEMICOLON .

    DEF             reduce using rule 13 (statement -> NAME LPAREN RPAREN SEMICOLON .)
    $end            reduce using rule 13 (statement -> NAME LPAREN RPAREN SEMICOLON .)
    RBRAC           reduce using rule 13 (statement -> NAME LPAREN RPAREN SEMICOLON .)
    NAME            reduce using rule 13 (statement -> NAME LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> NAME LPAREN RPAREN SEMICOLON .)


state 49

    (14) statement -> NAME LPAREN argse RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 58


state 50

    (11) argse -> argse COMMA . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 59

state 51

    (15) statement -> NAME LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 60


state 52

    (12) argse -> expression COMMA . expression
    (23) expression -> . INT
    (24) expression -> . NAME
    (25) expression -> . STRING
    (26) expression -> . expression MUL expression
    (27) expression -> . expression DIV expression
    (28) expression -> . expression PLUS expression
    (29) expression -> . expression MINUS expression

    INT             shift and go to state 25
    NAME            shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 61

state 53

    (21) statement -> NAME EQUALS expression SEMICOLON .

    DEF             reduce using rule 21 (statement -> NAME EQUALS expression SEMICOLON .)
    $end            reduce using rule 21 (statement -> NAME EQUALS expression SEMICOLON .)
    RBRAC           reduce using rule 21 (statement -> NAME EQUALS expression SEMICOLON .)
    NAME            reduce using rule 21 (statement -> NAME EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 21 (statement -> NAME EQUALS expression SEMICOLON .)


state 54

    (26) expression -> expression MUL expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 26 (expression -> expression MUL expression .)
    MUL             reduce using rule 26 (expression -> expression MUL expression .)
    DIV             reduce using rule 26 (expression -> expression MUL expression .)
    PLUS            reduce using rule 26 (expression -> expression MUL expression .)
    MINUS           reduce using rule 26 (expression -> expression MUL expression .)
    RPAREN          reduce using rule 26 (expression -> expression MUL expression .)
    COMMA           reduce using rule 26 (expression -> expression MUL expression .)

  ! MUL             [ shift and go to state 39 ]
  ! DIV             [ shift and go to state 40 ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]


state 55

    (27) expression -> expression DIV expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 27 (expression -> expression DIV expression .)
    MUL             reduce using rule 27 (expression -> expression DIV expression .)
    DIV             reduce using rule 27 (expression -> expression DIV expression .)
    PLUS            reduce using rule 27 (expression -> expression DIV expression .)
    MINUS           reduce using rule 27 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 27 (expression -> expression DIV expression .)
    COMMA           reduce using rule 27 (expression -> expression DIV expression .)

  ! MUL             [ shift and go to state 39 ]
  ! DIV             [ shift and go to state 40 ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]


state 56

    (28) expression -> expression PLUS expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 28 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 28 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 28 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 28 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 28 (expression -> expression PLUS expression .)
    MUL             shift and go to state 39
    DIV             shift and go to state 40

  ! MUL             [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! DIV             [ reduce using rule 28 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]


state 57

    (29) expression -> expression MINUS expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    SEMICOLON       reduce using rule 29 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 29 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 29 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 29 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 29 (expression -> expression MINUS expression .)
    MUL             shift and go to state 39
    DIV             shift and go to state 40

  ! MUL             [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! DIV             [ reduce using rule 29 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]


state 58

    (14) statement -> NAME LPAREN argse RPAREN SEMICOLON .

    DEF             reduce using rule 14 (statement -> NAME LPAREN argse RPAREN SEMICOLON .)
    $end            reduce using rule 14 (statement -> NAME LPAREN argse RPAREN SEMICOLON .)
    RBRAC           reduce using rule 14 (statement -> NAME LPAREN argse RPAREN SEMICOLON .)
    NAME            reduce using rule 14 (statement -> NAME LPAREN argse RPAREN SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> NAME LPAREN argse RPAREN SEMICOLON .)


state 59

    (11) argse -> argse COMMA expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    RPAREN          reduce using rule 11 (argse -> argse COMMA expression .)
    COMMA           reduce using rule 11 (argse -> argse COMMA expression .)
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 60

    (15) statement -> NAME LPAREN expression RPAREN SEMICOLON .

    DEF             reduce using rule 15 (statement -> NAME LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 15 (statement -> NAME LPAREN expression RPAREN SEMICOLON .)
    RBRAC           reduce using rule 15 (statement -> NAME LPAREN expression RPAREN SEMICOLON .)
    NAME            reduce using rule 15 (statement -> NAME LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 15 (statement -> NAME LPAREN expression RPAREN SEMICOLON .)


state 61

    (12) argse -> expression COMMA expression .
    (26) expression -> expression . MUL expression
    (27) expression -> expression . DIV expression
    (28) expression -> expression . PLUS expression
    (29) expression -> expression . MINUS expression

    RPAREN          reduce using rule 12 (argse -> expression COMMA expression .)
    COMMA           reduce using rule 12 (argse -> expression COMMA expression .)
    MUL             shift and go to state 39
    DIV             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DEF in state 4 resolved as shift
