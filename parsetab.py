
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVDEF DIV EQUALS INT LBRAC LPAREN MINUS MUL NAME PLUS RBRAC RETURN RPAREN SEMICOLON\n    code : function\n         | code code\n    \n    function : DEF NAME LPAREN RPAREN statement\n             | DEF NAME LPAREN RPAREN statementc\n    \n    statements : statement statements\n               | statement statement\n    \n    statementc : LBRAC statement RBRAC\n               | LBRAC statements RBRAC\n               | LBRAC empty RBRAC\n    \n    statement : NAME EQUALS expression SEMICOLON\n    \n    statement : RETURN expression SEMICOLON\n    \n    expression : INT\n               | NAME\n    \n    expression : expression MUL expression\n               | expression DIV expression\n               | expression PLUS expression\n               | expression MINUS expression\n    \n    empty :\n    '
    
_lr_action_items = {'DEF':([0,1,2,4,9,10,21,27,29,30,31,],[3,3,-1,3,-3,-4,-11,-7,-8,-9,-10,]),'$end':([1,2,4,9,10,21,27,29,30,31,],[0,-1,-2,-3,-4,-11,-7,-8,-9,-10,]),'NAME':([3,7,11,12,13,17,21,22,23,24,25,26,31,],[5,8,16,8,16,8,-11,16,16,16,16,8,-10,]),'LPAREN':([5,],[6,]),'RPAREN':([6,],[7,]),'RETURN':([7,12,17,21,26,31,],[11,11,11,-11,11,-10,]),'LBRAC':([7,],[12,]),'EQUALS':([8,],[13,]),'INT':([11,13,22,23,24,25,],[15,15,15,15,15,15,]),'RBRAC':([12,17,18,19,21,26,28,31,],[-18,27,29,30,-11,-6,-5,-10,]),'SEMICOLON':([14,15,16,20,32,33,34,35,],[21,-12,-13,31,-14,-15,-16,-17,]),'MUL':([14,15,16,20,32,33,34,35,],[22,-12,-13,22,-14,-15,22,22,]),'DIV':([14,15,16,20,32,33,34,35,],[23,-12,-13,23,-14,-15,23,23,]),'PLUS':([14,15,16,20,32,33,34,35,],[24,-12,-13,24,-14,-15,-16,-17,]),'MINUS':([14,15,16,20,32,33,34,35,],[25,-12,-13,25,-14,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,1,4,],[1,4,4,]),'function':([0,1,4,],[2,2,2,]),'statement':([7,12,17,26,],[9,17,26,26,]),'statementc':([7,],[10,]),'expression':([11,13,22,23,24,25,],[14,20,32,33,34,35,]),'statements':([12,17,26,],[18,28,28,]),'empty':([12,],[19,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> function','code',1,'p_code','main.py',81),
  ('code -> code code','code',2,'p_code','main.py',82),
  ('function -> DEF NAME LPAREN RPAREN statement','function',5,'p_function','main.py',88),
  ('function -> DEF NAME LPAREN RPAREN statementc','function',5,'p_function','main.py',89),
  ('statements -> statement statements','statements',2,'p_statements','main.py',95),
  ('statements -> statement statement','statements',2,'p_statements','main.py',96),
  ('statementc -> LBRAC statement RBRAC','statementc',3,'p_statementc','main.py',102),
  ('statementc -> LBRAC statements RBRAC','statementc',3,'p_statementc','main.py',103),
  ('statementc -> LBRAC empty RBRAC','statementc',3,'p_statementc','main.py',104),
  ('statement -> NAME EQUALS expression SEMICOLON','statement',4,'p_statementvardef','main.py',111),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_statementreturn','main.py',116),
  ('expression -> INT','expression',1,'p_expression_basic','main.py',122),
  ('expression -> NAME','expression',1,'p_expression_basic','main.py',123),
  ('expression -> expression MUL expression','expression',3,'p_expression_primitive','main.py',129),
  ('expression -> expression DIV expression','expression',3,'p_expression_primitive','main.py',130),
  ('expression -> expression PLUS expression','expression',3,'p_expression_primitive','main.py',131),
  ('expression -> expression MINUS expression','expression',3,'p_expression_primitive','main.py',132),
  ('empty -> <empty>','empty',0,'p_empty','main.py',142),
]
