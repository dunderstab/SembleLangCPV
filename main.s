
.section .data



STRlock0:
	.asciz "Hello World\n"
STRlock1:
	.asciz "_!_SLA"
STRlock3:
	.asciz "Hello World\n"
STRlock4:
	.asciz "Hello World\n"
STRlock5:
	.asciz "is_arr = %d\n"
STRlock6:
	.asciz "lenarr = %d\n"
STRlock11:
	.asciz "[\n"
STRlock15:
	.asciz "%d, "
STRlock17:
	.asciz "_!_SLA"
STRlock19:
	.asciz ",\n"
STRlock24:
	.asciz "]\n"
STRlock25:
	.asciz "Hello World\n"
STRlock26:
	.asciz "_!_SLA"
STRlock27:
	.asciz "_!_SLA"
STRlock28:
	.asciz "Hello World\n"
STRlock29:
	.asciz "Hello World\n"# FILE GENERATED BY SEMBLELANG
#                             
# SembleLang version beta1.1.2
# By Riley
# 




.section .text



.globl _start

_start:
	
	call main
	movl %eax, %ebx
	movl $1, %eax
	int $0x80
.type printArray, @function
printArray:
	pushl %ebp
	movl %esp, %ebp
	subl $4, %esp
	movl $STRlock0, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl 12(%ebp), %ecx
	pushl %ecx
	movl $0, %ecx

	popl %edx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	movl $STRlock1, %ecx
	pushl %ecx
	call strcmp
	popl %ebx
	popl %ebx
	movl %eax, %ecx
	movl %ecx, %edx
	pushl %edx
	movl $1, %ecx

	popl %edx
	addl %ecx, %edx
	movl %edx, %ecx
	cmpl $1, %ecx
	jne .ne2
	movl $STRlock3, %ecx
	pushl %ecx
	call printf
	popl %ebx
	.ne2:
	movl $STRlock4, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl $STRlock5, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl 12(%ebp), %ecx
	pushl %ecx
	movl $1, %ecx

	popl %edx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	movl $STRlock6, %ecx
	pushl %ecx
	call printf
	popl %ebx
	popl %ebx
	movl $0, %ecx

	movl %ecx, -4(%ebp) # variable i
	movl -4(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl 8(%ebp), %ecx
	popl %edx
	cmpl %ecx, %edx
	jge .ne7
	movl $1, %ecx
	jmp .ne8
	.ne7:
	movl $0, %ecx
	.ne8:
	cmpl $1, %ecx
	jne .ne9
	.ne10:
	movl $STRlock11, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl -4(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $1, %ecx

	popl %edx
	subl %ecx, %edx
	movl %edx, %ecx
	popl %edx
	cmpl %ecx, %edx
	je .ne12
	movl $1, %ecx
	jmp .ne13
	.ne12:
	movl $0, %ecx
	.ne13:
	cmpl $1, %ecx
	jne .ne14
	movl 12(%ebp), %ecx
	pushl %ecx
	movl -4(%ebp), %ecx
	popl %edx
	addl $2, %ecx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	movl $STRlock15, %ecx
	pushl %ecx
	call printf
	popl %ebx
	popl %ebx
	jmp .ne16
	.ne14:
	movl 12(%ebp), %ecx
	pushl %ecx
	movl -4(%ebp), %ecx
	popl %edx
	addl $2, %ecx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	movl $0, %ecx

	popl %edx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	movl $STRlock17, %ecx
	pushl %ecx
	call strcmp
	popl %ebx
	popl %ebx
	movl %eax, %ecx
	movl %ecx, %edx
	pushl %edx
	movl $1, %ecx

	popl %edx
	addl %ecx, %edx
	movl %edx, %ecx
	cmpl $1, %ecx
	jne .ne18
	movl 12(%ebp), %ecx
	pushl %ecx
	movl -4(%ebp), %ecx
	popl %edx
	addl $2, %ecx
	movl (%edx,%ecx, 4), %ebx
	movl %ebx, %ecx
	pushl %ecx
	call printArray
	popl %ebx
	movl $STRlock19, %ecx
	pushl %ecx
	call printf
	popl %ebx
	.ne18:
	.ne16:
	movl -4(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $1, %ecx

	popl %edx
	subl %ecx, %edx
	movl %edx, %ecx
	popl %edx
	cmpl %ecx, %edx
	je .ne20
	movl $1, %ecx
	jmp .ne21
	.ne20:
	movl $0, %ecx
	.ne21:
	incl -4(%ebp)
	movl -4(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl 8(%ebp), %ecx
	popl %edx
	cmpl %ecx, %edx
	jge .ne22
	movl $1, %ecx
	jmp .ne23
	.ne22:
	movl $0, %ecx
	.ne23:
	cmpl $1, %ecx
	jne .ne9
	jmp .ne10
	.ne9:
	movl $STRlock24, %ecx
	pushl %ecx
	call printf
	popl %ebx
	.lprintArray:
	movl %ebp, %esp
	popl %ebp
	ret

.type main, @function
main:
	pushl %ebp
	movl %esp, %ebp
	subl $4, %esp
	movl $STRlock25, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl $20, %ecx
	movl %ecx, %edx
	pushl %edx
	movl $8, %ecx

	popl %edx
	addl %ecx, %edx
	movl %edx, %ecx
	pushl %ecx
	call malloc
	popl %ebx
	movl %eax, %ecx
	movl %ecx, %edi
	movl $STRlock26, %ecx
	movl %ecx, 4(%edi)
	movl $5, %ecx

	movl %ecx, 8(%edi) # DJJJJ
	pushl %edi
	movl $1, %ecx

	popl %edi
	movl %ecx, 12(%edi)
	pushl %edi
	movl $12, %ecx
	movl %ecx, %edx
	pushl %edx
	movl $8, %ecx

	popl %edx
	addl %ecx, %edx
	movl %edx, %ecx
	pushl %ecx
	call malloc
	popl %ebx
	movl %eax, %ecx
	movl %ecx, %edi
	movl $STRlock27, %ecx
	movl %ecx, 4(%edi)
	movl $3, %ecx

	movl %ecx, 8(%edi) # DJJJJ
	pushl %edi
	movl $1, %ecx

	popl %edi
	movl %ecx, 12(%edi)
	pushl %edi
	movl $2, %ecx

	popl %edi
	movl %ecx, 16(%edi)
	pushl %edi
	movl $3, %ecx

	popl %edi
	movl %ecx, 20(%edi)
	movl %edi, %ecx
	popl %edi
	movl %ecx, 16(%edi)
	pushl %edi
	movl $3, %ecx

	popl %edi
	movl %ecx, 20(%edi)
	pushl %edi
	movl $4, %ecx

	popl %edi
	movl %ecx, 24(%edi)
	pushl %edi
	movl $5, %ecx

	popl %edi
	movl %ecx, 28(%edi)
	movl %edi, %ecx
	movl %ecx, -4(%ebp) # variable testArr
	movl $STRlock28, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl -4(%ebp), %ecx
	pushl %ecx
	movl $5, %ecx

	pushl %ecx
	call printArray
	popl %ebx
	popl %ebx
	movl $STRlock29, %ecx
	pushl %ecx
	call printf
	popl %ebx
	movl $0, %ecx

	movl %ecx, %eax
	jmp .lmain
	.lmain:
	movl %ebp, %esp
	popl %ebp
	ret
