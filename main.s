
.section .data



STRlock4:
	.asciz "n = %d"# FILE GENERATED BY SEMBLELANG
#                             
# SembleLang version beta1.1.2
# By Riley
#  A Langauge designed for speed and simpli
# city. With accuracy and flexibility in mi
# nd I hand-crafted this language from the 
# ground up to provide an easy way to get i
# nto high-speed coding.



.section .data



.globl _start

_start:
	call main
	movl %eax, %ebx
	movl $1, %eax
	int $0x80
.type fibonacci, @function
fibonacci:
	pushl %ebp
	movl %esp, %ebp
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $2, %ecx

	popl %edx
	cmpl %ecx, %edx
	jge .ne0
	movl $1, %ecx
	jmp .ne1
	.ne0:
	movl $0, %ecx
	.ne1:
	cmpl $1, %ecx
	jne .ne2
	movl 8(%ebp), %ecx
	movl %ecx, %eax
	jmp .lfibonacci
	jmp .ne3
	.ne2:
	movl 8(%ebp), %ecx
	pushl %ecx
	movl $STRlock4, %ecx
	pushl %ecx
	call printf
	popl %ebx
	popl %ebx
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $1, %ecx

	popl %edx
	subl %ecx, %edx
	movl %edx, %ecx
	pushl %ecx
	call fibonacci
	popl %ebx
	movl %eax, %ecx
	movl %ecx, %edx
	pushl %edx
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $2, %ecx

	popl %edx
	subl %ecx, %edx
	movl %edx, %ecx
	pushl %ecx
	call fibonacci
	popl %ebx
	movl %eax, %ecx
	popl %edx
	addl %ecx, %edx
	movl %edx, %ecx
	movl %ecx, %eax
	jmp .lfibonacci
	.ne3:
	movl 8(%ebp), %ecx
	movl %ecx, %edx
	pushl %edx
	movl $2, %ecx

	popl %edx
	cmpl %ecx, %edx
	jge .ne5
	movl $1, %ecx
	jmp .ne6
	.ne5:
	movl $0, %ecx
	.ne6:
	.lfibonacci:
	movl %ebp, %esp
	popl %ebp
	ret

.type main, @function
main:
	pushl %ebp
	movl %esp, %ebp
	movl $20, %ecx

	pushl %ecx
	call fibonacci
	popl %ebx
	movl $0, %ecx

	movl %ecx, %eax
	jmp .lmain
	.lmain:
	movl %ebp, %esp
	popl %ebp
	ret
